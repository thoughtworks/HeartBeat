plugins {
  id 'java'
  id 'jacoco'
  id 'pmd'
  id 'org.springframework.boot' version '3.1.9'
  id 'io.spring.dependency-management' version '1.1.0'
  id "io.spring.javaformat" version "0.0.38"
  id 'com.github.jk1.dependency-license-report' version '2.1'
  id "org.sonarqube" version "4.4.1.3373"
}

group = 'com.tw'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
  mavenCentral()
}

configurations.configureEach {
  exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
}

dependencies {
  implementation ("org.springframework.boot:spring-boot-starter-webflux") {
    exclude group: 'org.yaml', module: 'snakeyaml'
  }
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-actuator'
  implementation 'org.springframework.boot:spring-boot-starter-log4j2'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'org.springframework:spring-core:6.1.3'
  implementation("org.springframework.cloud:spring-cloud-starter-openfeign:4.0.2") {
    exclude group: 'commons-fileupload', module: 'commons-fileupload'
  }
  implementation ("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.4") {
    exclude group: 'org.yaml', module: 'snakeyaml'
  }
  implementation 'commons-fileupload:commons-fileupload:1.5'
  implementation 'org.yaml:snakeyaml:2.0'
  implementation 'org.springframework.boot:spring-boot-starter-cache'
  implementation 'org.ehcache:ehcache:3.10.8'
  implementation 'javax.annotation:javax.annotation-api:1.3.2'
  implementation 'com.google.code.gson:gson:2.8.9'
  testImplementation 'junit:junit:4.13.2'
  compileOnly 'org.projectlombok:lombok:1.18.26'
  annotationProcessor 'org.projectlombok:lombok:1.18.26'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
  testCompileOnly 'org.projectlombok:lombok:1.18.26'
  testAnnotationProcessor 'org.projectlombok:lombok:1.18.26'
  implementation 'com.opencsv:opencsv:5.5.2'
  implementation 'org.apache.commons:commons-text:1.10.0'
}

tasks.named('test') {
  useJUnitPlatform()
  testLogging {
    events "passed", "skipped", "failed"
  }
  finalizedBy jacocoTestReport
}

pmd {
  toolVersion = '6.55.0'
  ruleSets = ['java-basic']
  ruleSetConfig = resources.text.fromFile("src/main/resources/pmd.xml")
}

sonar {
  properties {
    property "sonar.projectKey", "au-heartbeat-heartbeat-backend"
    property "sonar.organization", "au-heartbeat"
    property "sonar.host.url", "https://sonarcloud.io"
  }
}

def testIgnoreList = [
  "**/HeartbeatApplication**",
  '**/config/**',
  '**/util/SystemUtil**'
]

jacocoTestReport {
  dependsOn test
  reports {
    xml.required = true
    csv.required = true
  }
  classDirectories.setFrom(files(classDirectories.files.collect {
    fileTree(dir: it, exclude: testIgnoreList)
  }))
}
jacocoTestCoverageVerification {
  afterEvaluate {
    classDirectories.setFrom(files(classDirectories.files.collect {
      fileTree(dir: it, exclude: testIgnoreList)
    }))
  }
  violationRules {
    rule {
      limit {
        minimum = 1.0
      }
    }
  }
}
check.dependsOn jacocoTestCoverageVerification

licenseReport {
  allowedLicensesFile = new File("src/main/resources/allowed-licenses.json")
}
