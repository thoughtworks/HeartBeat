Parameters:
  GitHubOrg:
    Type: String
  RepositoryName:
    Type: String
  OIDCProviderArn:
    Description: Arn for the GitHub OIDC Provider.
    Default: ""
    Type: String
  AwsAccountId:
    Description: "Account id, like: 123456789012"
    Default: ""
    Type: String
  AwsHost:
    Description: "Host of AWS resource, like: cn-north-1.amazonaws.com.cn"
    Default: ""
    Type: String
  AwsRegion:
    Description: AWS region
    Default: "ap-southeast-1"
    Type: String
  EC2ImageId:
    Description: AMI ID
    Default: "ami-0bf97847fcd5c9f57"
    Type: String
  SSHPublicKey:
    Description: Public key to connect EC2
    Default: ""
    Type: String
  SSHPrivateKey:
    Description: Private key to connect EC2
    Default: ""
    Type: String
  OIDCAudience:
    Description: Audience supplied to configure-aws-credentials.
    Default: "sts.amazonaws.com"
    Type: String
  BuildKiteToken:
    Description: Token which is used to setup agent
    Type: String

Conditions:
  CreateOIDCProvider: !Equals
    - !Ref OIDCProviderArn
    - ""

Resources:
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: DockerAuth
          PolicyDocument:
            Statement:
              - Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetRepositoryPolicy
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                  - ecr:BatchGetImage
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Statement:
              - Action:
                  - ec2:StartInstances
                  - ec2:StopInstances
                  - ec2:DescribeInstances
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: arn:aws:logs:*:*:*

  AWSGitHubActionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRoleWithWebIdentity
            Principal:
              Federated: !If
                - CreateOIDCProvider
                - !Ref GithubOidc
                - !Ref OIDCProviderArn
            Condition:
              StringEquals:
                token.actions.githubusercontent.com:aud: !Ref OIDCAudience
              StringLike:
                token.actions.githubusercontent.com:sub: !Sub repo:${GitHubOrg}/${RepositoryName}:*
      Policies:
        - PolicyName: IAMAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - iam:GetRole
                Effect: Allow
                Resource: "*"
        - PolicyName: GitHubAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetRepositoryPolicy
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                  - ecr:BatchGetImage
                  - ecr:CompleteLayerUpload
                  - ecr:InitiateLayerUpload
                  - ecr:PutImage
                  - ecr:UploadLayerPart
                  - cloudformation:CreateStack
                  - cloudformation:CreateChangeSet
                  - cloudformation:ListStacks
                  - cloudformation:UpdateStack
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeStackResource
                  - cloudformation:DescribeStackEvents
                  - cloudformation:ValidateTemplate
                  - cloudformation:DescribeChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:GetTemplateSummary
                  - ec2:*
                Effect: Allow
                Resource: "*"
  AWSBuildKiteStepsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              AWS: "arn:aws:iam::661346466567:root"
      Policies:
        - PolicyName: IAMAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - iam:GetRole
                Effect: Allow
                Resource: "*"
        - PolicyName: GitHubAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetRepositoryPolicy
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                  - ecr:BatchGetImage
                  - ecr:CompleteLayerUpload
                  - ecr:InitiateLayerUpload
                  - ecr:PutImage
                  - ecr:UploadLayerPart
                  - cloudformation:CreateStack
                  - cloudformation:CreateChangeSet
                  - cloudformation:ListStacks
                  - cloudformation:UpdateStack
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeStackResource
                  - cloudformation:DescribeStackEvents
                  - cloudformation:ValidateTemplate
                  - cloudformation:DescribeChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:GetTemplateSummary
                  - ec2:*
                Effect: Allow
                Resource: "*"

  GithubOidc:
    Type: AWS::IAM::OIDCProvider
    Condition: CreateOIDCProvider
    Properties:
      Url: https://token.actions.githubusercontent.com
      ClientIdList:
        - sts.amazonaws.com
      ThumbprintList:
        - 6938fd4d98bab03faadb97b34396831e3780aea1
  EcrBackend:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "heartbeat_backend"
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
              "rules": [
                  {
                      "rulePriority": 1,
                      "description": "Delete old images",
                      "selection": {
                          "tagStatus": "tagged",
                          "tagPrefixList": ["hb"],
                          "countType": "imageCountMoreThan",
                          "countNumber": 2
                      },
                      "action": {
                          "type": "expire"
                      }
                  }
              ]
          }
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowPushPull
            Effect: Allow
            Principal:
              AWS:
                - "*"
            Action:
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - ecr:BatchCheckLayerAvailability
              - ecr:PutImage
              - ecr:InitiateLayerUpload
              - ecr:UploadLayerPart
              - ecr:CompleteLayerUpload
  EcrFrontend:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "heartbeat_frontend"
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
              "rules": [
                  {
                      "rulePriority": 1,
                      "description": "Delete old images",
                      "selection": {
                          "tagStatus": "tagged",
                          "tagPrefixList": ["hb"],
                          "countType": "imageCountMoreThan",
                          "countNumber": 2
                      },
                      "action": {
                          "type": "expire"
                      }
                  }
              ]
          }
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowPushPull
            Effect: Allow
            Principal:
              AWS:
                - "*"
            Action:
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - ecr:BatchCheckLayerAvailability
              - ecr:PutImage
              - ecr:InitiateLayerUpload
              - ecr:UploadLayerPart
              - ecr:CompleteLayerUpload
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EC2Role
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Sub ${EC2ImageId}
      InstanceType: "t2.micro"
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: "16"
            VolumeType: "gp3"
      Tags:
        - Key: "Name"
          Value: "HeartbeatEC2"
        - Key: "app"
          Value: "Heartbeat"
        - Key: "env"
          Value: "SIT"
      SecurityGroups:
        - !Ref EC2SSHSecurityGroup
        - !Ref EC2SSHSecurityGroupForBuildkite
        - !Ref EC2AppSecurityGroup
        - !Ref EC2OldAppSecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      KeyName: !Ref EC2KeyPair
      UserData:
        "Fn::Base64": !Sub |
          #cloud-config
          cloud_final_modules:
          - [scripts-user, always]
          runcmd:
            - sudo yum -y install docker
            - sudo systemctl enable docker.service
            - sudo systemctl start docker.service
            - sudo chmod 666 /var/run/docker.sock
            - sudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
            - sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
            - sudo chmod +x /usr/local/bin/docker-compose
            - sudo `aws ecr get-login-password --region ${AwsRegion} | docker login --username AWS --password-stdin ${AwsAccountId}.dkr.ecr.${AwsHost}`
  E2EEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Sub ${EC2ImageId}
      InstanceType: "t2.micro"
      Tags:
        - Key: "Name"
          Value: "Heartbeat E2E and MockServer"
        - Key: "app"
          Value: "Heartbeat E2E & MockServer"
        - Key: "env"
          Value: "E2E"
      SecurityGroups:
        - !Ref EC2SSHSecurityGroup
        - !Ref EC2SSHSecurityGroupForBuildkite
        - !Ref EC2AppSecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      KeyName: !Ref EC2KeyPair
      UserData:
        "Fn::Base64": !Sub |
          #cloud-config
          cloud_final_modules:
          - [scripts-user, always]
          runcmd:
            - sudo yum -y install docker
            - sudo systemctl enable docker.service
            - sudo systemctl start docker.service
            - sudo chmod 666 /var/run/docker.sock
            - sudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
            - sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
            - sudo chmod +x /usr/local/bin/docker-compose
            - sudo `aws ecr get-login-password --region ${AwsRegion} | docker login --username AWS --password-stdin ${AwsAccountId}.dkr.ecr.${AwsHost}`
  BuildKiteAgentEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Sub ${EC2ImageId}
      InstanceType: "t2.medium"
      Tags:
        - Key: "Name"
          Value: "HearbeatBuildKiteAgent"
        - Key: "app"
          Value: "HearbeatBuildKiteAgent"
        - Key: "env"
          Value: "E2E"
      SecurityGroups:
        - !Ref EC2SSHSecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      KeyName: !Ref EC2KeyPair
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: "14"
            VolumeType: "gp3"
      UserData:
        "Fn::Base64": !Sub |
          #cloud-config
          cloud_final_modules:
          - [scripts-user, always]
          runcmd:
            - sudo yum -y install docker jq
            - sudo systemctl enable docker.service
            - sudo systemctl start docker.service
            - sudo chmod 666 /var/run/docker.sock
            - sudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
            - sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
            - sudo chmod +x /usr/local/bin/docker-compose
            - # Ref to https://buildkite.com/docs/agent/v3/redhat
            - sudo sh -c 'echo -e "[buildkite-agent]\nname = Buildkite Pty Ltd\nbaseurl = https://yum.buildkite.com/buildkite-agent/stable/x86_64/\nenabled=1\ngpgcheck=0\npriority=1" > /etc/yum.repos.d/buildkite-agent.repo'
            - sudo yum -y install buildkite-agent
            - sudo sed -i "s/xxx/${BuildKiteToken}/g" /etc/buildkite-agent/buildkite-agent.cfg
            - sudo systemctl enable buildkite-agent && sudo systemctl start buildkite-agent
            - # Add public key on GitHub DeployKey(https://github.com/au-heartbeat/Heartbeat/settings/keys) according to https://buildkite.com/docs/agent/v3/redhat#ssh-key-configuration
            - sudo mkdir /opt/gradle
            - sudo yum install -y wget
            - sudo wget https://services.gradle.org/distributions/gradle-8.1.1-bin.zip -P /opt/gradle
            - sudo unzip -d /opt/gradle /opt/gradle/gradle-8.1.1-bin.zip
            - echo 'export PATH=$PATH:/opt/gradle/gradle-8.1.1/bin' | sudo tee -a /etc/profile.d/gradle.sh
            - source /etc/profile.d/gradle.sh
            - sudo yum update -y
            - sudo yum install nodejs -y
            - sudo npm install -g pnpm
            - sudo yum install java-17-amazon-corretto -y
            - sudo -u buildkite-agent bash -c "cd /var/lib/buildkite-agent/.ssh/ && echo ${SSHPrivateKey} > HeartBeatKeyPair.pem && chmod 600 HeartBeatKeyPair.pem"
            - sudo yum install -y xorg-x11-server-Xvfb gtk3-devel libnotify-devel libXScrnSaver

  EC2KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: HeartbeatKeyPair
      PublicKeyMaterial: !Ref SSHPublicKey
  EC2SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      Tags:
        - Key: "Name"
          Value: "SSH for dev"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 202.66.38.0/24

  EC2SSHSecurityGroupForBuildkite:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable Buildkite to access EC2
      Tags:
        - Key: "Name"
          Value: "SSH for Buildkite"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 13.214.134.0/24

  EC2OldAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access application
      Tags:
        - Key: "Name"
          Value: "Old app port"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 4325
          ToPort: 4325
          CidrIp: 0.0.0.0/0
  EC2AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access application
      Tags:
        - Key: "Name"
          Value: "New app port"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 4321
          ToPort: 4321
          CidrIp: 0.0.0.0/0

  WebPortAddress:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref EC2Instance
      Domain: vpc
  E2EWebPortAddress:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref E2EEC2Instance
      Domain: vpc

  LambdaForEC2Management:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: !Sub |
          import boto3
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          ec2 = boto3.client('ec2')

          def lambda_handler(event, context):
              action = event.get('action')
              logger.info('---Start to %s instances.', action)
              filters = [{'Name': 'tag:' + 'env', 'Values': ['SIT','E2E']}]
              instances = ec2.describe_instances(Filters=filters)
              instance_ids = []
              for reservation in instances['Reservations']:
                  for instance in reservation['Instances']:
                      instance_ids.append(instance['InstanceId'])

              if event['action'] == 'start':
                  response = ec2.start_instances(InstanceIds=instance_ids)
                  logger.info('---Started instances. response: %s', response)
              elif event['action'] == 'stop':
                  response = ec2.stop_instances(InstanceIds=instance_ids)
                  logger.info('---Stopped instances. response: %s', response)
              else:
                  response = {'Error': 'Invalid action'}
                  logger.error(response)
              return "completed"
      Runtime: python3.8
      Architectures:
        - "arm64"
  LambdaPermissionForStartEC2Management:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaForEC2Management
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventsRuleForEC2Start.Arn
  LambdaPermissionForStopEC2Management:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaForEC2Management
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventsRuleForEC2Stop.Arn

  EventsRuleForEC2Start:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: default
      Name: ec2-start-event-rule
      ScheduleExpression: cron(0 1 ? * * *)
      State: DISABLED
      Targets:
        - Id: ec2-start-event-rule-id
          Arn: !GetAtt LambdaForEC2Management.Arn
          Input: |
            {
              "action":"start"
            }
  EventsRuleForEC2Stop:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: default
      Name: ec2-stop-event-rule
      ScheduleExpression: cron(15 14 ? * * *)
      State: DISABLED
      Targets:
        - Id: ec2-stop-event-rule-id
          Arn: !GetAtt LambdaForEC2Management.Arn
          Input: |
            {
              "action":"stop"
            }
Outputs:
  Role:
    Value: !GetAtt AWSGitHubActionRole.Arn
  EIP:
    Value: !GetAtt WebPortAddress.PublicIp
  E2EEIP:
    Value: !GetAtt E2EWebPortAddress.PublicIp
